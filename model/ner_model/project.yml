# 2AMM30: This project is not actively used in the notebook. However, for running in CLI it is a very useful file
title: "Training a NER component using a pretrained pipeline"
description: "A NER project that updates the NER component in an existing pretrained pipeline. All other pipeline components are preserved and frozen during training."
spacy_version: ">=3.0.6,<4.0.0"
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "ner_demo_update"
  lang: "en"
  # for en_core_web_trf or other trf pipeline, use spacy-transformers>=1.1.1
  pipeline: "en_core_web_sm"

  annotations_train: "assets/train_1.json"
  annotations_dev: "assets/dev_1.json"
  train_file: "corpus/train_1.spacy"
  dev_file: "corpus/dev_1.spacy"
  trained_model: "training_1/model-best"
  trained_model_metrics: "training_1/metrics.json"

  annotations_train2: "assets/train_2.json"
  annotations_dev2: "assets/dev_2.json"
  train2_file: "corpus/train_2.spacy"
  dev2_file: "corpus/dev_2.spacy"
  trained_model2: "training_2/model-best"
  trained_model_metrics2: "training_2/metrics.json"


  config: "configs/config.cfg"
  version: "0.0.1"
  # Set your GPU ID, -1 is CPU
  gpu_id: -1

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded.
assets:
  - dest: ${vars.annotations_train}
  - dest: ${vars.annotations2_train}
  - dest: ${vars.annotations_dev}
  - dest: ${vars.annotations2_dev}

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all1:
    - convert1
    - train1
    - evaluate1
  all2:
    - convert2
    - train2
    - evaluate2

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download the pretrained pipeline"
    script:
      - "python -m spacy download ${vars.pipeline}"

  - name: "convert1"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/convert.py ${vars.lang} ${vars.annotations_train} ${vars.train_file}"
      - "python scripts/convert.py ${vars.lang} ${vars.annotations_dev} ${vars.dev_file}"
    deps:
      - "${vars.annotations_train}"
      - "${vars.annotations_dev}"
      - "scripts/convert.py"
    outputs:
      - "${vars.train_file}"
      - "${vars.dev_file}"

  - name: "convert2"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/convert.py ${vars.lang} ${vars.annotations_train2} ${vars.train2_file}"
      - "python scripts/convert.py ${vars.lang} ${vars.annotations_dev2} ${vars.dev2_file}"
    deps:
      - "${vars.annotations_train2}"
      - "${vars.annotations_dev2}"
      - "scripts/convert.py"
    outputs:
      - "${vars.train2_file}"
      - "${vars.dev2_file}"

  - name: "create-config"
    help: "Create a config for updating only NER from an existing pipeline"
    script:
      - "python scripts/create_config.py ${vars.pipeline} ner ${vars.config}"
    deps:
      - "scripts/create_config.py"
    outputs:
      - "${vars.config}"

  - name: "train1"
    help: "Update the NER model"
    script:
      - "python -m spacy train ${vars.config} --output training_1/ --paths.train ${vars.train_file} --paths.dev ${vars.dev_file}"
    deps:
      - "${vars.config}"
      - "${vars.train_file}"
      - "${vars.dev_file}"
    outputs:
      - "${vars.trained_model}"

  - name: "train2"
    help: "Update the NER model"
    script:
      - "python -m spacy train ${vars.config} --output training_2/ --paths.train ${vars.train2_file} --paths.dev ${vars.dev2_file}"
    deps:
      - "${vars.config}"
      - "${vars.train2_file}"
      - "${vars.dev2_file}"
    outputs:
      - "${vars.trained_model2}"

  - name: "evaluate1"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate ${vars.trained_model} ${vars.dev_file} --output ${vars.trained_model_metrics} --code scripts/evaluate.py"
    deps:
      - "${vars.dev_file}"
      - "${vars.trained_model}"
    outputs:
      - "${vars.trained_model_metrics}"

  - name: "evaluate2"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate ${vars.trained_model2} ${vars.dev2_file} --output ${vars.trained_model_metrics2} --code scripts/evaluate.py"
    deps:
      - "${vars.dev2_file}"
      - "${vars.trained2_model}"
    outputs:
      - "${vars.trained_model_metrics2}"

  - name: package1
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package ${vars.trained_model} packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "${vars.trained_model}"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-1-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: package2
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package ${vars.trained_model2} packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "${vars.trained_model2}"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-2-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"